<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<choose>
			<when condition="@(context.Request.Url.Query.GetValueOrDefault("request",context.Request.Url.Query.GetValueOrDefault("REQUEST","")).Equals("GetCapabilities",StringComparison.OrdinalIgnoreCase))">
				<rewrite-uri template="/rail/ext/ogc?request=GetCapabilities&amp;sourceSystem=DPEPortal" copy-unmatched-params="true" />
			</when>
			<otherwise>
				<return-response>
					<set-status code="403" reason="RequestNotMatchToOperation" />
				</return-response>
			</otherwise>
		</choose>
		<base />
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
		<set-header name="Content-Type" exists-action="override">
			<value>application/xml</value>
		</set-header>
		<set-body template="none">@{
            string vars = context.Response.Body.As<string>();
            XmlDocument xml = new XmlDocument();
            xml.LoadXml(vars);

            XmlNodeList aNodes = xml.GetElementsByTagName("ows:OperationsMetadata");

            foreach (XmlNode aNode in aNodes)
            {
                foreach (XmlNode gNode in aNode.ChildNodes)
                {
                    if (gNode.Name == "ows:Operation")
                    {
                        string idAttribute = gNode.Attributes["name"]?.InnerText;
                        foreach (XmlNode hNode in gNode.ChildNodes)
                        {
                            if (hNode.Name == "ows:DCP")
                            {
                                foreach (XmlNode jNode in hNode.ChildNodes)
                                {
                                    if (jNode.Name == "ows:HTTP")
                                    {
                                        foreach (XmlNode kNode in jNode.ChildNodes)
                                        {
                                            kNode.Attributes["xlink:href"].InnerText = string.Format("{0}{1}", kNode.Attributes["xlink:href"].InnerText, idAttribute);
                                        }
                                    }
                                }
                           }
                        }
                    }
                }
            }    
return xml.OuterXml;
        }</set-body>
		<find-and-replace from="http://10.199.29.183/rail/ext/ogc?" to="https://20.193.43.173/external/ST-GIS/" />
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>